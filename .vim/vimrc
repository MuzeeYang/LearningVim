"source ~/.vim/.earthmelon.vim
syntax on
set mouse=n
set hlsearch nowrapscan scrolloff=7 number smartindent tabstop=4 softtabstop=4 shiftwidth=4 "expandtab 
set fileencodings=ucs-bom,utf-8,cp20932,cp51932,cp932,cp20936,cp51936,cp54936,cp936,cp950,latin1
let mapleader="`"

"set auto pair
:vnoremap () c()<esc>hpl
:vnoremap [] c[]<esc>hpl
:vnoremap "" c""<esc>hpl
:vnoremap {} c{}<esc>hpl
:vnoremap '' c''<esc>hpl
:vnoremap <> c<><esc>hpl
:vnoremap {{ c{<cr>}<esc>P

"save file
:nnoremap <leader>s :call SaveFile()<cr>

"set tab to compeletion
:inoremap <tab> <c-r>=TabComplete()<cr>
:inoremap <leader><tab> <tab>
:nnoremap <tab> <c-w>w
:vnoremap <tab> >

"space select
:nnoremap <space> viw
:vnoremap <space> e
:inoremap <leader><space> <c-r>=EmptyPairsJmp()<cr>

"sys clipboard
:vnoremap <leader>p "+p
:vnoremap <leader>y "+y
:nnoremap <leader>p "+p
:nnoremap <leader>P "+P


"search highlight
:vnoremap / "fy:call FindSearchItem()<cr>

"set fold
:set foldmethod=syntax
:set nofoldenable
:nnoremap <F4> :set foldenable!<cr>:set foldenable?<cr>
":nnoremap = zo
":nnoremap - zc
":nnoremap + zO
":nnoremap _ zC

"reload
:nnoremap <F5> :call ReloadFile()<cr>
:nnoremap <F6> :call UpdateCscope()<cr>

"ctags
:nnoremap <leader>] <c-]> 
:nnoremap <leader>[ <c-t> 

"taglist
:let Tlist_Auto_Open=0
:let Tlist_Show_One_File=1
:let Tlist_Use_Right_Window=0
:let Tlist_Exit_OnlyWindow=1
:let Tlist_Process_File_Always=1
:nnoremap <F3> :call ToggleTaskList()<cr>

"switch upper/lower
:inoremap <leader>~ <esc>viw~ea

"scroll page
:nnoremap , <c-w>7<
:nnoremap . <c-w>7>
:nnoremap <c-j> <c-d>
:nnoremap <c-k> <c-u>
:nnoremap <c-h> <c-w>h
:nnoremap <c-l> <c-w>l
:inoremap <c-h> <left>
:inoremap <c-l> <right>
:inoremap <c-j> <down>
:inoremap <c-k> <up>

"cscope
vnoremap ? "fy:call CscopeCmd('s')<cr>
"search all
vnoremap <leader>s "fy:call CscopeCmd('s')<cr>
"search define
vnoremap <leader>g "fy:call CscopeCmd('g')<cr>
"search funcs called by this
vnoremap <leader>d "fy:call CscopeCmd('d')<cr>
"search funcs who call this
vnoremap <leader>c "fy:call CscopeCmd('c')<cr>
"search string
vnoremap <leader>t "fy:call CscopeCmd('t')<cr>
"egrep
vnoremap <leader>e "fy:call CscopeCmd('e')<cr>
"find and open file
vnoremap <leader>f "fy:call CscopeCmd('f')<cr>
"search files who include this
vnoremap <leader>i "fy:call CscopeCmd('i')<cr>

function! CscopeCmd(cmd)
	":echom ":cs find ".a:cmd." ".@f
	:execute ":cs find ".a:cmd." ".@f
endfunction

"others
:nnoremap U <c-r>
:inoremap <leader><leader> `


"status line
set cursorline
set laststatus=2
"set statusline=%1*\ %f%h%r%m\ %*\ %<[%{&ft}][%{&ff}]%=%l,%02c%7p%%\ 

augroup colors_earthmelon
	:autocmd!
	:autocmd InsertEnter * :execute ":hi user1 ctermfg=white ctermbg=darkblue"
	:autocmd InsertLeave * :execute ":hi user1 ctermfg=white ctermbg=red"
	:autocmd BufEnter * :call SetStsLine(1)
	:autocmd WinLeave,BufReadPost * :call SetStsLine(0)
augroup end

"autocmd
augroup auto_buffer
	:autocmd!
	:autocmd filetype	c,cpp :call CLangSetting()
	:autocmd bufreadpre,bufnewfile * :source ~/.vim/syntax/common.vim
	:autocmd bufreadpost,bufread * :normal! '"
augroup end

"Functions
function! SetStsLine(idx)
	"echom a:idx
	hi	user1				term=bold			cterm=bold
	hi	user1				ctermfg=white		ctermbg=red
	hi	statuslinenc		term=bold			cterm=bold
	hi	statuslinenc		ctermfg=darkgray	ctermbg=grey
	hi	statusline			term=bold			cterm=bold
	hi	statusline			ctermfg=black		ctermbg=white

	if a:idx == 1
		setlocal statusline=%1*\ %f%h%r%m\ %*\ %<[%{&ft}][%{&ff}]%=%l,%02c%7p%%\ 
	else
		setlocal statusline=\ %<%F%h%r%m%=\ 
	endif
endfunction

function! ToggleTaskList()
	:TlistToggle
	:call SetStsLine(1)
endfunction

function! TabComplete()
	let s:lineStr = getline('.')
	let s:posCur = col('.')

	if s:posCur == len(s:lineStr) + 1 "pos at the end
		let s:endKeyWord = match(s:lineStr, "[0-9a-zA-Z_]$", s:posCur - 2)
	else
		let s:endKeyWord = match(s:lineStr, "[0-9a-zA-Z_][^0-9a-zA-Z_]", s:posCur - 2)
	endif
	if s:endKeyWord != -1
		if s:endKeyWord == s:posCur - 2
			return "\<c-n>"
		endif
	endif
	return "\<tab>"

endfunction

function! EmptyPairsJmp()
	let s:startSearch = col('.')
	let s:lineSearch = getline('.')
	let s:rangeSearch = len(s:lineSearch)
	if s:startSearch > s:rangeSearch
		let s:startSearch = 1
	endif

	let s:pattenPairs = '()\|[]\|{}\|""\|<>\|'''''
	let s:startSearch = match(s:lineSearch,s:pattenPairs,s:startSearch - 1)
	if s:startSearch != -1
		call cursor(0,s:startSearch + 1)
	else
		call cursor(0,s:rangeSearch + 1)
	endif
	return "\<right>"
endfunction

function! FindSearchItem()
	let @/=@f
endfunction

function! SaveFile()
	if &readonly == 1 "readonly
		let s:isSaveForce = input("This file is [RO], SAVE it by force or not (y/n)?")
		if s:isSaveForce == 'y'
			:w !sudo tee % >/dev/null
		endif
	else "noreadonly
		:w
	endif
endfunction

function! ReloadFile()
	if &modified == 1 "modified
		let s:isModForce = input("This file is Modified, ABANDON it by force or not (y/n)?")
		if s:isModForce == 'y'
			:edit!
		endif
	else
		:edit
	endif
endfunction

function! CLangSetting()
	set cindent
	set tags=tags;,~/.vim/systags
	"cscope
	if has("cscope")
		:call AddCscope()
	endif
endfunction

function! AddCscope()
	set csprg=/usr/bin/cscope
	set csto=0
	set cst
	set nocsverb
	set cspc=3

	"add any database in current dir  
	if filereadable("cscope.out")
		cs add cscope.out
	"else search cscope.out elsewhere  
	else 
		let cscope_db=findfile("cscope.out",".;")
		let cscope_pre=matchstr(cscope_db,".*/")
		if !empty(cscope_db) && filereadable(cscope_db)
			exe "cs add" cscope_db cscope_pre
		endif
	endif
	set csverb
endfunction

function! UpdateCscope()
	if has("cscope")
		if filereadable("cscope.out")
			:cscope kill -1
			!cscope -bkqRU
			:call AddCscope()
		else
			let cscope_db=findfile("cscope.out",".;")
			let cscope_path=matchstr(cscope_db,".*/")
			if !empty(cscope_db) && filereadable(cscope_db)
				let current_path=getcwd()
				:cscope kill -1
				exe "chdir " cscope_path
				!cscope -bkqRU
				exe "chdir " current_path
				:call AddCscope()
			endif
		endif
	endif
endfunction

"beta debug
:nnoremap <leader>rr :source $MYVIMRC<cr>
:nnoremap <leader>tt :call TestFunc()<cr>
iabbrev waht what
augroup autest
	:autocmd!
	"Reading
"au BufNewFile 		* :echom "BufNewFile" 		
"au BufReadPre		* :echom "BufReadPre"
"au BufRead			* :echom "BufRead"
"au BufReadPost 		* :echom "BufReadPost"
"au FileReadPre 		* :echom "FileReadPre"
"au FileReadPost 	* :echom "FileReadPost"   
"au FileReadCmd 		* :echom "FileReadCmd"
"au FilterReadPre 	* :echom "FilterReadPre"   
"au FilterReadPost 	* :echom "FilterReadPost"
"au StdinReadPre 	* :echom "StdinReadPre"
"au StdinReadPost 	* :echom "StdinReadPost"
	"Writing
"au BufWrite 		* :echom "BufWrite"
"au BufWritePre 		* :echom "BufWritePre"
"au BufWritePost 	* :echom "BufWritePost"
"au BufWriteCmd 		* :echom "BufWriteCmd"
"au FileWritePre 	* :echom "FileWritePre"
"au FileWritePost 	* :echom "FileWritePost"
"au FileWriteCmd 	* :echom "FileWriteCmd"
"au FileAppendPre 	* :echom "FileAppendPre"
"au FileAppendPost 	* :echom "FileAppendPost"
"au FileAppendCmd 	* :echom "FileAppendCmd"
"au FilterWritePre 	* :echom "FilterWritePre"
"au FilterWritePost 	* :echom "FilterWritePost"
    "Buffers
"au BufAdd 		    * :echom "BufAdd"
"au BufCreate 		* :echom "BufCreate"
"au BufDelete 		* :echom "BufDelete"
"au BufWipeout 		* :echom "BufWipeout"
"au BufFilePre 		* :echom "BufFilePre"
"au BufFilePost 		* :echom "BufFilePost"
"au BufEnter 		* :echom "BufEnter"
"au BufLeave 		* :echom "BufLeave"
"au BufWinEnter 		* :echom "BufWinEnter"
"au BufWinLeave 		* :echom "BufWinLeave"
"au BufUnload 		* :echom "BufUnload"
"au BufHidden 		* :echom "BufHidden"
"au BufNew           * :echom "BufNew"
"au SwapExists 		* :echom "SwapExists"
"au WinNew			* :echom "WinNew" 
"au TabNew			* :echom "TabNew"
"au TabClosed		* :echom "TabClosed"
"au WinEnter  		* :echom "WinEnter"
"au WinLeave  		* :echom "WinLeave"
"au TabEnter  		* :echom "TabEnter"
"au TabLeave  		* :echom "TabLeave"
"au CmdwinEnter		* :echom "CmdwinEnter"
"au CmdwinLeave		* :echom "CmdwinLeave"
augroup end

